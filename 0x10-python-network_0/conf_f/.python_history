--help
help
exit
end
exit
end
--help
>>> a = "Python is cool"
>>> print(a[:6])
a = "Python is cool"
print(a[:6])
print(a[:8])
print(a[8])
print(a[:8])
print(a[:6])
print(a[6])
print(a[5])
print(a[:5])
print(a[:5-3])
print(a[:5-1])
print(a[:5-2])
print(a[-2])
print(a[-4])
print(a[:-4])
print(a[:-2])
print(a[:-1])
print(a[:-5])
print(a[:-2])
print(f"{98} Battery street, {'San Francisco'}")
>>> 
print(a[7:])
print(a[0:6])
print(a[1:6])
print(a[1:6]) print(f"{98} Battery street")
 print(f"{98} Battery street")
print(f"{98} Battery street")
a ="jody saber ~__~"
print(a)
print(a[3])
print(a[0])
print(a[1])
print(a[])
print(a[2:])
print(a[:2])
print(a[0])
print(a[1])
x=0
while(x>= 0){print(a[])
x = print(a)
 
x = print(a[::-1])
print(a[::-1])
exit
 
import fibo
fibo.fib(2)
fibo.fib(600)
ls
fi = fibo.fib(500)
fi
fi(500)
fi = fibo.fib
fi(500)
from fibo import fib, fib2
fib(500)
fib2(300)
from fibo import *
fib(600)
from fibo import fib as fibonacci
fibonacci(1000)
dir()
pip install sound
def my_function():
print("In my function")
def my_function():
	print("In my function")
my_function
def my_function():
my_function
for i in range(2, 10, 2):
    print(i, end=" ")
for i in range(4):
    print(i, end=" ")
if True:
    print("Holberton")
else:
    print("School")
if 12 == 48/3 or 12 is 12:
    print("Holberton")
else:
    print("School")
if 12 == 48/3 or 12 is 12:
    print("Holberton")
else:
    print("School")
for i in range(2, 4):
    print(i, end=" ")
# Create a sample collection
users = {'Hans': 'active', 'Éléonore': 'inactive', '景太郎': 'active'}
# Strategy:  Iterate over a copy
for user, status in users.copy().items():
    if status == 'inactive':
        del users[user]
# Strategy:  Create a new collection
active_users = {}
for user, status in users.items():
    if status == 'active':
        active_users[user] = status
for n in range(2, 10):
    for x in range(2, n):
        if n % x == 0:
            print(n, 'equals', x, '*', n//x)
            break
    else:
        # loop fell through without finding a factor
        print(n, 'is a prime number')
print(range(2, 5))
range(2, 5)
a =range(2, 5)
print(a)
for x in range(6)
for x in range(6):
	print(x)
for x in range(2, 6):
	print(x)
for x in range(3, 6):
	print(x)
match point:
    case (0, 0):
        print("Origin")
    case (0, y):
        print(f"Y={y}")
    case (x, 0):
        print(f"X={x}")
    case (x, y):
        print(f"X={x}, Y={y}")
    case _:
        raise ValueError("Not a point"
match point:
    case (0, 0):
        print("Origin")
    case (0, y):
        print(f"Y={y}")
    case (x, 0):
        print(f"X={x}")
    case (x, y):
        print(f"X={x}, Y={y}")
    case _:
        raise ValueError("Not a point"
# point is an (x, y) tuple
match point:
    case (0, 0):
        print("Origin")
    case (0, y):
        print(f"Y={y}")
    case (x, 0):
        print(f"X={x}")
    case (x, y):
        print(f"X={x}, Y={y}")
    case _:
        raise ValueError("Not a point")
print("""\
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
""")
def my_function(counter=89):
>>>     print("Counter: {}".format(counter))
>>> 
>>> my_function()
def my_function(counter=89):
    print("Counter: {}".format(counter)) 
my_function()
def my_function(counter=89):
    print("Counter: {}".format(counter)) 
my_function()
~
 a = [1, 2, 3, 4]
a = [1, 2, 3, 4]
a.append(5)
len(a)
a = [1, 2, 3, 4]
b = a
a[2] = 10
a
a[1:3]
a = [1, 2, 3, 4]
a[1:3]
a[-3]
a[-]
a[-1]
a = [1, 2, 3, 4]
 b = a
b = a
a[2] = 10
a
len(a)
a[0]
a.append(5)
len(a)
for i in [1, 3, 4, 2]:
print(i, end=" ")
	print(i, end=" ")
for i in [1, 3, 4, 2]:
	print(i, end=" ")
a = { 'id': 89, 'name': "John", 'projects': [1, 2, 3, 4] }
a.get('projects')
a = { 'id': 89, 'name': "John" }
a.get('id')
for i in range(1, 4):
     print(i, end=" ")
a = { 'id': 89, 'name': "John", 'projects': [1, 2, 3, 4], 'friends': [ { 'id': 82, 'name': "Bob" }, { 'id': 83, 'name': "Amy" } ] }
a.get('friends')[-1].get("name")
for i in ["Hello", "Holberton", "School", 98]:
	print(i, end=" ")
a = { 'id': 89, 'name': "John" }
a['id']
a = { 'id': 89, 'name': "John" }
a.get('age', 0)
for i in [1, 2, 3, 4]:
	print(i, end=" ")
for i in range(0, 3):
	print(i, end=" ")
a = { 'id': 89, 'name': "John", 'projects': [1, 2, 3, 4] }
a.get('projects')[3]
a = { 'id': 89, 'name': "John" }
a.get('age')
a.get('projects')[3]
a = { 'id': 89, 'name': "John", 'projects': [1, 2, 3, 4] }
a.get('projects')[3]
for i in range(0, 3):
	print(i, end=" ")
for i in [1, 2, 3, 4]:
	print(i, end=" ")
a = { 'id': 89, 'name': "John" }
a['id']
a = { 'id': 89, 'name': "John", 'projects': [1, 2, 3, 4], 'friends': [ { 'id': 82, 'name': "Bob" }, { 'id': 83, 'name': "Amy" } ] }
a.get('friends')[-1].get("name")
exit 
97-65
98-69
import 10-add
import 10-add.py
import add
ls
dir
dir()
15%3
15%5
15%1
15%2
15%3
15%4
15%5
15%6
class User:
>>>     id = 89
>>>     name = "no name"
>>>     __password = None
>>>     
>>>     def __init__(self, new_name=None):
>>>         self.is_new = True
>>>         if new_name is not None:
>>>             self.name = new_name
>>> 
>>> u = User()
>>> u.is_new
class User:
     id = 89
     name = "no name"
     __password = None
     
     def __init__(self, new_name=None):
         self.is_new = True
         if new_name is not None:
             self.name = new_name
 
 u = User()
 u.is_new
class User:
     id = 89
     name = "no name"
     __password = None
     def __init__(self, new_name=None):
         self.is_new = True
         if new_name is not None:
             self.name = new_name
u = User()
u.is_new
4.5+2.44+7.11+6.32+3.51+8.33+8.22+7.35+7.35+3.29+7.18+7
73/6
12*5
fruits = ['apple', 'banana', 'cherry']
fruits.append("orange")
print({}.formate(fruits))
print(fruits)
help(int)
class User:
    id = 1
u = User()
u.id = 89
print(u.id)
class User:
    id = 1
u = User()
u.id = 89
User.id = 98
print(u.id)
class User:
    id = 1
u = User()
u.id = 89
User.id = 98
print(User.id)
class User:
    id = 1
print(User.id)
class User:
    id = 1
u = User()
u.id = 89
print(u.id)
class User:
    id = 1
u = User()
User.id = 98
print(u.id)
class User:
    id = 1
User.id = 98
u = User()
u.id = 89
print(User.id)
class User:
    id = 1
User.id = 98
u = User()
print(u.id)
class User:
    id = 1
User.id = 98
u = User()
u.id = 89
print(u.id)
l1 = [1, 2, 3]
l2 = l1
l1.append(4)
print(l2)
def increment(n):
    n += 1
a = 1
increment(a)
print(a)
l1 = [1, 2, 3]
l2 = l1
l1 = l1 + [4]
print(l2)
def increment(n):
    n.append(4)
l = [1, 2, 3]
increment(l)
print(l)
def assign_value(n, v):
    n = v
l1 = [1, 2, 3]
l2 = [4, 5, 6]
assign_value(l1, l2)
print(l1)
import django
ls
class Base():
    """ My base class """
    __nb_instances = 0
    def __init__(self):
        Base.__nb_instances += 1
        self.id = Base.__nb_instances
for i in range(3):
    b = Base()
print(b.id)
class Base():
    	__nb_instances = 0
    def __init__(self):
        Base.__nb_instances += 1
        self.id = Base.__nb_instances
for i in range(3):
    b = Base()
print(b.id)
for i in range(3):
    b = Base()
print(b.id)
print('عربي')
lis=[12, 60, 5, 30]
lis.sort
lis.sort()
print lis
print(lis)
alias p="cd /media/ka/WORK/ALX_SE/WORKING_SPACE_repo/alx-higher_level_programming/;git add .;git commit -m 'au';git push;cd -";alias pys="python3 -m pycodestyle --show-source --show-pep8";alias py3="python3"
import json
x = [1, 'simple', 'list']
json.dumps(x)
111111111111111111111111111
print(dir(str))
import pygame
pygame.init()
dis=pygame.display.set_mode((400,300))
pygame.display.update()
pygame.quit()
quit()import pygame
pygame.init()
dis=pygame.display.set_mode((400,300))
pygame.display.update()
pygame.quit()
import pygame
pygame.init()
dis=pygame.display.set_mode((400,300))
pygame.display.update()
pygame.quit()
quit()
#!/usr/bin/python3                                                                                   
MyList = __import__('1-my_list').MyList                                                              
                                                                                                     
my_list = MyList()                                                                                   
my_list.append(1)                                                                                    
my_list.append(4)                                                                                    
my_list.append(2)                                                                                    
my_list.append(3)                                                                                    
my_list.append(5)        
my_list.print_sorted(1)
def test_var_args(f_arg, *argv):
    print "first normal arg:", f_arg
    for arg in argv:
        print "another arg through *argv :", arg
    for arg in argv:
def test_var_args(f_arg, *argv):
    print "first normal arg:", f_arg
    for arg in argv:
def test_var_args(f_arg, *argv):
    print "first normal arg:", f_arg
    for arg in argv:
def test_var_args(f_arg, *argv):
    print "first normal arg:", f_arg
import json
data = {
    "name": "John Doe",
    "age": 30,
    "city": "New York"
}
with open("data.json", "w") as fp:
    json.dump(data, fp)
import json
data = {
    "name": "John Doe",
    "age": 30,
    "city": "New York",
    "pets": ["dog", "cat", "bird"]
}
compact_json = json.dumps(data)
print(f"Compact JSON:\n{compact_json}")
pretty_json = json.dumps(data, indent=4)
print(f"\nPretty JSON with 4-space indentation:\n{pretty_json}")
tabbed_json = json.dumps(data, indent="\t")
print(f"\nPretty JSON with tab indentation:\n{tabbed_json}")
```
tabbed_json = json.dumps(data, indent="\t")import json
data = {
    "name": "John Doe",
    "age": 30,
    "city": "New York",
    "pets": ["dog", "cat", "bird"]
}
compact_json = json.dumps(data)
print(f"Compact JSON:\n{compact_json}")
pretty_json = json.dumps(data, indent=4)
print(f"\nPretty JSON with 4-space indentation:\n{pretty_json}")
tabbed_json = json.dumps(data, indent="\t")
print(f"\nPretty JSON with tab indentation:\n{tabbed_json}")
```
import json
data = {
    "name": "John Doe",
    "age": 30,
    "city": "New York",
    "pets": ["dog", "cat", "bird"]
}
compact_json = json.dumps(data)
print(f"Compact JSON:\n{compact_json}")
pretty_json = json.dumps(data, indent=4)
print(f"\nPretty JSON with 4-space indentation:\n{pretty_json}")
tabbed_json = json.dumps(data, indent="\t")
print(f"\nPretty JSON with tab indentation:\n{tabbed_json}")
clear
clear()
import json
data = {
    "name": "John Doe",
    "age": 30,
    "city": "New York",
    "pets": ["dog", "cat", "bird"]
}
compact_json = json.dumps(data)
print(f"Compact JSON:\n{compact_json}")
pretty_json = json.dumps(data, indent=4)
print(f"\nPretty JSON with 4-space indentation:\n{pretty_json}")
tabbed_json = json.dumps(data, indent="\t")
print(f"\nPretty JSON with tab indentation:\n{tabbed_json}")
su
import karg_
import "karg_"
import karg_
import karg
sum_all(1,2,5,6,3)
from karg import sum_all
sum_all(1,2,5,6,3)
42 - 24
n1 = 12
n2 = 14
n1 = n1 +n2
n1
n2=n1 - n2
n2
n1 = n1 -n2
n1
lis ["kassem"]
lis = ["kassem"]
lis = ["kassem","sa"]
print(lis)
lis[0] = lis[0] + lis[1]
print lis
print(lis)
list = ["kass"]
print(list[0])
print(list[0]+lis[0])
lis[1]=list[0]+lis[0]
print(lis)
import state_of_Dev
while(1):
	stat_(deb_token)
from state_of_Dev import *
stat_(dev_token)
while(1):
	stat_(dev_token)
import time as t  
l=[1,2,3,4,5]  
for y in l:  
     print(y)  
t.sleep(2) 
import time as t  
for y in l:  
     print(y)  
t.sleep(2) 
for y in l:  
     print(y)  
	 t.sleep(2) 
for y in l:  
     print(y)  
	t.sleep(2) 
for y in l:  
	print(y)  
	t.sleep(2) 
print(dev_tokes)
import state_of_Dev
print(dev_tokes)
from state_of_Dev import *
print(dev_tokes)
dev_token = "https://blynk.cloud/external/api/isHardwareConnected?token=ITAtv9VAQfglpGcZbVCCoBEDZ9ktcp3h"
print(dev_tokes)
print(dev_token)
import curses
screen = curses.initscr()
cucsacsasadsasasasadssa
cu
curser
import curses
screen = curses.initscr()
screen = curses.initscr()dsds
txt = "CompanyX"
x = txt.isalpha()
print(x)
p = 12
o = 3
p **=
p **=1
print(**=1)
print(p**=1)
print(p)
p **=2
print(p)
p //=2
print(p)
fname = input("first name")
 kassem
print(fname)
fname.strip()
fname = input("first name")
		kassemmm
print(fname)
fname.strip()
fname.break("e")
print("#" * 80)
print("kassem".center(80,"#"))
print("#" * 80)
print("1234" - "12")
print("1234" -- "12")
print("1234" - "12345")
print("1234" + "12345")
print("1234" / "12345")
print(2**3)
print(2^3)
p **=2
p=5
p **=2
print(p)
x =5
x = x * x 
print(x)
x =5
x **=3
print(x)
def cle(wor):
if len(wor) == 1:
def cle(wor):
	if len(wor) == 1:
		return
	if wor[0] == wor[1]:
		return cle(wor[1:])
cle("wwworrrlldd")
print(cle("wwworrrlldd"))
def cle(wor):
	if len(wor) == 1:
		return wor
	if wor[0] == wor[1]:
		return cle(wor[1:])
	return word
print(cle("wwworrrlldd"))
def cle(wor):
     if len(wor) == 1:
             return wor
     if wor[0] == wor[1]:
             return cle(wor[1:])
     return wor
def cle(wor):
print(cle("wwworrrlldd"))
def cle(wor):
     if len(wor) == 1:
             return wor
     if wor[0] == wor[1]:
             return cle(wor[1:])
     return wor
print(cle("wwworrrlldd"))
def cle(wor):
     if len(wor) == 1:
             return wor
     if wor[0] == wor[1]:
             return cle(wor[1:])
     return wor + cle(wor[1:])
print(cle("wwworrrlldd"))
def cle(wor):
     if len(wor) == 1:
             return wor
     if wor[0] == wor[1]:
             return cle(wor[1:])
     return wor[0] + cle(wor[1:])
print(cle("wwworrrlldd"))
my= open("t.txt")
print(my.tell())
print(my)
print(my.txet)
print(my.text)
print(my.tell())
my.truncate(4)
my.truncate(3)
my= open("t.txt", "a")
my.truncate(3)
print(my.tell())
print(my)
print("kassem".center(80,"File handling"))
print("File handling".center(80,"#"))
print("File handling".center(40,"#"))
import os
print(os.getcwd())
import os
print(os.path.dirname(os.path.abspath(__file__))
file = "tes.c"
print(os.path.dirname(os.path.abspath(__file__)))
file = "tes.c"
print(os.path.dirname(os.path.abspath(__file__)))
file = "tes.c"
print(os.path.dirname(os.path.abspath(__file__)))
os.chdir(os.path.dirname(os.path.abspath(__file__)))
i = 0 
print(f".{i}.zfill(2,"0")")
print(f".{i}.zfill(2)")
print(f".{i}.zfil(2)")
print(f".{i}")
print(f".{i}".zfill(2,0))
print(f".{i}".zfill(2))
for i in range(100):
	print(f".{i}".zfill(2))
print("kassem".center(80,"modules"))
print("Modules_importing".center(80,"*"))
print("Modules_importing".center(100,"*"))
print("ka\n")
152-68
with open("out_duration") as fp:
	for line in fp.lines():
		x = line[:-4]
		print(x[2:])
with open("out_duration") as fp:
	for line in fp.readlines():
		x = line[:-4]
	for line in fp.readlines():
with open("out_duration") as fp:
	for line in fp.readlines():
		x = line[:-4]
		print(x[2:])
with open("out_duration") as fp:
	for line in fp.readlines():
		x = line[-4]
		print(x[2:])
with open("out_duration") as fp:
	for line in fp.readlines():
		x = line[-8]
		print(x)
range(0,10)
print(range(0,10))
print(list(range(0,10)))
print(list(range(10,0)))
help(for)
help()
help("for")
for i in [:range(0, 20)]
for i in [:range(0, 20)]:
for i in [range(0, 20)]:
	print(i)
for i in range(0, 20):
	print(i)
for i in range(20, 0):
	print(i)
for i in range(20, 0,-1):
	print(i)
a = 14
a.mod
a.mod()
mod
mod()
import math
mod()
help("%")
%14
2%14
5%14
2.pow(5%14)
pow(5%14)
pow(5,%14)
pow(%14)
343788854128511746048 - 343788854128511743343
print(len("1718944270642558716715"))
print(343788854128511743343*5)
print(343788854128511743343/5)
import factros
print("built in function".center(80, "#"))
print("built in function".center(20, "#"))
print("built in function".center(40, "#"))
print("OOP".center("+", 50))
print("OOP".center(50))
print("OOP".center(50,'+'))
print("OOP".center(50,'='))
print("OOP".center(20,'='))
print("OOP".center(30,'='))
print(("OOP".center(5)).center(30,"="))
dir("")
import pygame
dir(pygame)
import pyfiglet
dir(pyfigle)
dir(pyfiglet)
print_figlet("a")
print_figlet
file = "tes.c"
out = pyfiglet.figlet_format("Point")
print(out)
pyfiglet.figlet_format("قاسم")
import pyfiglet
pyfiglet.figlet_format("قاسم")
pyfiglet.figlet_format(" قاسم")
pyfiglet.figlet_format("eat my ")
pyfiglet.figlet_format("eat my")
pyfiglet.figlet_format("eat")
print(out)
help("__del__")
x = {"ka":4, "ma":10}
x[0].value()
dir(x)
x[0].values()
x.values()
printx.values())
print(x.values())
print(x.value())
print(x.keys())
k= 12
k **=12
k =**12
k =**
k **=
k **=k
k = **k
k 
x **=3
import 9-multiply_by_2
from 9-multiply_by_2 import *
a_dictionary = {'John': 12, 'Alex': 8, 'Bob': 14, 'Mike': 14, 'Molly': 16}
de = {'John': 12, 'Alex': 8, 'Bob': 14, 'Mike': 14, 'Molly': 16}
de.values
de.values()
type(de.values())
ls
de.sorted
de.sort()
de.sorted()
sorted(de)
sorted(de.values)
sorted(de.values())
sorted(de.values()):-1
c = sorted(de.values())
c[:-1]
c[1:-1]
c[0:-1]
c[-1:]
c
for k in de.keys():
	if c[-1:] is de[k]:
		print(f"best score = {k}")
for k in de.keys():
	if c[-1:] is de[k]:
		print(f"best score = {k}")
best_score = __import__('10-best_score').best_score
de = {'John': 12, 'Alex': 8, 'Bob': 14, 'Mike': 14, 'Molly': 16}
best_score(de)
    >>> Basegeometry = __import__('7-base_geometry').BaseGeometry                                    
Basegeometry = __import__('7-base_geometry').BaseGeometry                                    
bg = BaseGeometry()           
bg = BaseGeometry()
Basegeometry = __import__('7-base_geometry').BaseGeometry
bg = BaseGeometry()
Basegeometry = __import__('7-base_geometry').BaseGeometry
bg = BaseGeometry()
ls
Basegeometry = __import__('7-base_geometry').BaseGeometry
bg = BaseGeometry()
Basegeometry = __import__('7-base_geometry').BaseGeometry
bg = BaseGeometry()
Basegeometry = __import__('7-base_geometry).BaseGeometry
bg = BaseGeometry()
Basegeometry = __import__('7-base_geometry.py').BaseGeometry
Basegeometry = __import__('7-base_geometry').BaseGeometry
bg = BaseGeometry()
B = __import__('7-base_geometry).BaseGeometry
Basegeometry = __import__('7-base_geometry').BaseGeometry
bg = Basegeometry()
B = __import__('7-base_geometry).BaseGeometry
buildozer init
buildozer 
                                                                                                     
import tkinter as tk                                                                                 
from tkinter import ttk                                                                              
                   
help("ttk.button")
help("ttk.Button")
help("tt.Button")
help("tk.Button")
help("tk.Button()")
help("ttk.Button()")
help("Button()")
help(Button())
help(tk.Button())
def main:
def main():
	print("sa")
main
main()
class hum:
	def __init__(self):
def ka(la:str="aa"):
	return la * 2
ka("ka")
help("except")
import cmd
class HelloWorld(cmd.Cmd):
    """Simple command processor example."""
    
    def do_greet(self, line):
        print "hello"
    
    def do_EOF(self, line):
        return True
if __name__ == '__main__':
    HelloWorld().cmdloop()
ls
    def do_greet(self, line):
print("".zfill)
print("a".zfill)
print("a".zfill("#"))
print("a".zfill("#",5))
print("a".zfill(5))
print("aaa".zfill(5))
print("aaa".center(5))
print("aaa".center("",))
print("aaa".center(5))
print("aaa".center(5,""))
print("aaa".center(5,"$"))
print("aaa".center(5,"#"))
print("NOTE".center(50,"#"))
print("commands".center(50,"#"))
print("ERRORS_BANK".center(50,"#"))
import re
txt = "The rain in Spain"
x = re.sub("\s", "9", txt, 2)
print(x)
type(x)
x = re.sub("\s", "_", txt, 2)
print(x)
x = re.sub("\s", "_", txt)
print(x)
help("raise")
sa
def rec():
	for i in range(5):
		print(f"{i}\n)
def rec():
	for i in range(5):
		print(f"{i}\n")
rec()
def rec():
	for i in range(5):
		print("*" * i)
def rec():
rec()
python -c "import sqlite3; print(sqlite3.connect('example.db').cursor().execute('SELECT * FROM stocks ORDER BY price').fetchall())"
